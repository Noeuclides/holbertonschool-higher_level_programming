``add_integer(a, b=98)``.

=======

``add_integer(a, b=98)`` returns the product of its arguments.  For numbers,
that value is equivalent to using the ``+`` operator.

    >>> add_integer = __import__('0-add_integer').add_integer 


Now use it:

    >>> add_integer(2, 98)
    100

::

    >>> add_integer(2.0, 98.1)
    100

::
    >>> add_integer('asd', 10)
    Traceback (most recent call last):
    TypeError: a must be an integer

::
    >>> add_integer(19, 'wwfj')
    Traceback (most recent call last):
    TypeError: b must be an integer


::
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::
    >>> add_integer(1e300, 2e3040)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::
    >>> add_integer( , )
    Traceback (most recent call last):
    SyntaxError: invalid syntax

::
    >>> add_integer(-2, 23)
    21

::
    >>> add_integer(23, -3)
    20

::
    >>> add_integer(-2, -2)
    -4

::
    >>> add_integer(0, )
    98

::
    >>> add_integer(,5)
    Traceback (most recent call last):
    SyntaxError: invalid syntax

::
    >>> add_integer(3, a)
    Traceback (most recent call last):
    NameError: name 'a' is not defined
    
::
    >>> add_integer(b, a)
    Traceback (most recent call last):
    NameError: name 'b' is not defined

::
    >>> add_integer(float('nan'), 4)
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
