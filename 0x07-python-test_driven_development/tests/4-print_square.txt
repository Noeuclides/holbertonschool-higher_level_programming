``print_square(size)``.

=======

``print_square(size)`` returns the product of its arguments.  For numbers,
that value is equivalent to using the ``+`` operator.

    >>> print_square = __import__('4-print_square').print_square 


Now use it:

    >>> print_square(2)
    ##
    ##

::

    >>> print_square(0)
    >>>

::
    >>> print_square(-2)
    Traceback (most recent call last):
    ValueError: size must be >= 0

::
    >>> print_square(2.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

::
    >>> print_square('string')
    Traceback (most recent call last):
    TypeError: size must be an integer

::
    >>> print_square(1e300)
    Traceback (most recent call last):
    TypeError: size must be an integer

::
    >>> print_square(13000000000000000000)
    Traceback (most recent call last):
    OverflowError: cannot fit 'int' into an index-sized integer

::
    >>> print_square(a)
    Traceback (most recent call last):
    NameError: name 'a' is not defined

::
    >>> print_square(-2.3)
    Traceback (most recent call last):
    TypeError: size must be an integer
    
::
    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

::
    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'

::
    >>> print_square(2, 3)
    Traceback (most recent call last):
    TypeError: print_square() takes 1 positional argument but 2 were given
