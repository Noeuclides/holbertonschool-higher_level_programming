``add_integer(a, b=98)``.

Numbers
=======

``add_integer(a, b=98)`` returns the product of its arguments.  For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer 
    >>> add_integer(2, 98)
    100

It also works with floating-point values.

::

    >>> add_integer(2.0, 98.1)
    100

::
    >>> add_integer('asd', 10)
    Traceback (most recent call last):
    TypeError: a must be an integer

::
    >>> add_integer(19, 'wwfj')
    Traceback (most recent call last):
    Typeerror: b must be an integer

::
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
    <BLANKLINE>
    During handling of the above exception, another exception occurred:
    <BLANKLINE>

::
    >>> add_integer(1e300, 2e3040)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer 

::
    >>> add_integer( , )
    Traceback (most recent call last):
    SyntaxError: invalid syntax

::
    >>> add_integer(-2, 23)
    21

::
    >>> add_integer(23, -3)
    20

::
    >>> add_integer(-2, -2)
    -4

::
    >>> add_integer(0, )
    98

::
    >>> add_integer(,5)
    Traceback (most recent call last):
    SyntaxError: invalid syntax
